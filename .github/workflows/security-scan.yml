name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Semgrep
      run: |
        pip install semgrep

    - name: Run Security Scan
      run: |
        chmod +x security-scan.sh
        ./security-scan.sh
        
    - name: Generate Security Summary
      run: |
        python3 -c "
        import json
        import os
        from datetime import datetime
        
        def load_findings(filename):
            if os.path.exists(filename):
                with open(filename, 'r') as f:
                    data = json.load(f)
                    return data.get('results', [])
            return []
        
        # Load all findings
        all_findings = []
        reports = ['security-reports/security-vulnerabilities.json', 'security-reports/python-security.json', 
                   'security-reports/typescript-security.json', 'security-reports/auth-security.json',
                   'security-reports/file-upload-security.json', 'security-reports/web-security.json',
                   'security-reports/secrets-scan.json']
        
        for report in reports:
            findings = load_findings(report)
            all_findings.extend(findings)
        
        # Categorize by severity
        severity_counts = {'ERROR': 0, 'WARNING': 0, 'INFO': 0}
        critical_findings = []
        
        for finding in all_findings:
            severity = finding.get('extra', {}).get('severity', 'INFO')
            severity_counts[severity] += 1
            
            if severity == 'ERROR':
                critical_findings.append(finding)
        
        summary = {
            'scan_date': datetime.now().isoformat(),
            'total_findings': len(all_findings),
            'severity_breakdown': severity_counts,
            'critical_findings': critical_findings[:10]  # Limit to first 10
        }
        
        with open('security-reports/scan-summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
        "

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: security-reports/
        retention-days: 30
        
    - name: Check for Critical Vulnerabilities
      run: |
        if [ -f "security-reports/scan-summary.json" ]; then
          CRITICAL_COUNT=$(python3 -c "
          import json
          with open('security-reports/scan-summary.json', 'r') as f:
              summary = json.load(f)
          print(summary['severity_breakdown']['ERROR'])
          ")
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "🚨 CRITICAL SECURITY VULNERABILITIES FOUND: $CRITICAL_COUNT"
            echo "Please fix these issues before merging."
            exit 1
          else
            echo "✅ No critical security vulnerabilities found."
          fi
        fi

    - name: Comment PR with Security Findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const summaryPath = 'security-reports/scan-summary.json';
            if (fs.existsSync(summaryPath)) {
              const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              
              let comment = '## 🔒 Security Scan Results\n\n';
              comment += `**Scan Date:** ${summary.scan_date}\n\n`;
              comment += `**Total Findings:** ${summary.total_findings}\n`;
              comment += `**Critical (ERROR):** ${summary.severity_breakdown.ERROR}\n`;
              comment += `**High (WARNING):** ${summary.severity_breakdown.WARNING}\n`;
              comment += `**Info:** ${summary.severity_breakdown.INFO}\n\n`;
              
              if (summary.severity_breakdown.ERROR > 0) {
                comment += '🚨 **CRITICAL SECURITY ISSUES FOUND!**\n\n';
                comment += 'Please review and fix these issues before merging:\n\n';
                
                summary.critical_findings.forEach((finding, index) => {
                  comment += `${index + 1}. **${finding.extra.message}**\n`;
                  comment += `   - File: \`${finding.path}:${finding.start.line}\`\n`;
                  comment += `   - Rule: \`${finding.check_id}\`\n\n`;
                });
              } else if (summary.severity_breakdown.WARNING > 0) {
                comment += '⚠️ **Security warnings found. Consider reviewing these issues.**\n\n';
              } else {
                comment += '✅ **No critical security issues found!**\n\n';
              }
              
              comment += '📊 Detailed reports are available in the workflow artifacts.';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.error('Error creating security comment:', error);
          }

  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install safety (Python dependency scanner)
      run: |
        pip install safety

    - name: Scan Python dependencies
      run: |
        cd backend
        safety check --json --output safety-report.json || true

    - name: Install npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit-report.json || true

    - name: Upload Dependency Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-reports
        path: |
          backend/safety-report.json
          frontend/npm-audit-report.json
        retention-days: 30
        
    - name: Check Dependency Vulnerabilities
      run: |
        # Check Python dependencies
        if [ -f "backend/safety-report.json" ]; then
          PYTHON_VULNS=$(python3 -c "
          import json
          try:
              with open('backend/safety-report.json', 'r') as f:
                  data = json.load(f)
              high_critical = sum(1 for vuln in data if vuln.get('severity') in ['high', 'critical'])
              print(high_critical)
          except:
              print(0)
          ")
          
          if [ "$PYTHON_VULNS" -gt 0 ]; then
            echo "🚨 HIGH/CRITICAL PYTHON DEPENDENCY VULNERABILITIES: $PYTHON_VULNS"
            exit 1
          fi
        fi
        
        # Check Node.js dependencies
        if [ -f "frontend/npm-audit-report.json" ]; then
          NODE_VULNS=$(python3 -c "
          import json
          try:
              with open('frontend/npm-audit-report.json', 'r') as f:
                  data = json.load(f)
              high_critical = sum(1 for vuln in data.get('vulnerabilities', {}).values() 
                                if vuln.get('severity') in ['high', 'critical'])
              print(high_critical)
          except:
              print(0)
          ")
          
          if [ "$NODE_VULNS" -gt 0 ]; then
            echo "🚨 HIGH/CRITICAL NODE.JS DEPENDENCY VULNERABILITIES: $NODE_VULNS"
            exit 1
          fi
        fi
        
        echo "✅ No high/critical dependency vulnerabilities found."

  container-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker build -t job-helper-backend ./backend
        docker build -t job-helper-frontend ./frontend

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'job-helper-backend:latest'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Run Trivy on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'job-helper-frontend:latest'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload Container Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-scan-results
        path: |
          trivy-backend-results.sarif
          trivy-frontend-results.sarif
        retention-days: 30 