[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "job-application-helper-backend"
version = "0.1.0"
description = "AI-powered job application helper backend with document processing and chat capabilities"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Job Application Helper Team"}
]
keywords = ["job", "application", "ai", "cv", "resume", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # LLM Providers
    "openai>=1.90.0,<2.0.0",
    "mistralai>=1.2.0,<2.0.0",
    
    # Data Processing
    "pydantic>=2.10.3,<3.0.0",
    "pydantic-settings>=2.10.0,<3.0.0",
    
    # Document Processing
    "PyMuPDF>=1.24.0,<2.0.0",
    "pymupdf4llm>=0.0.20,<1.0.0",
    "python-docx>=1.2.0,<2.0.0",
    "pdfplumber>=0.11.0,<1.0.0",
    
    # Web Framework & UI
    "fastapi>=0.115.2,<1.0.0",
    "uvicorn>=0.35.0,<1.0.0",
    "gunicorn>=21.2.0,<22.0.0",
    "python-multipart>=0.0.20,<1.0.0",
    
    # HTTP & Networking
    "httpx>=0.28.0,<1.0.0",
    "requests>=2.32.0,<3.0.0",
    "aiohttp>=3.12.0,<4.0.0",
    
    # Database & Storage
    "SQLAlchemy>=2.0.0,<3.0.0",
    
    # Security & Encryption
    "cryptography>=45.0.0,<46.0.0",
    "bcrypt>=4.3.0,<5.0.0",
    "defusedxml>=0.7.1,<1.0.0",
    
    # Configuration & Environment
    "python-dotenv>=1.1.0,<2.0.0",
    "PyYAML>=6.0.0,<7.0.0",
    
    # CLI & Utilities
    "click>=8.1.0,<9.0.0",
    "rich>=14.0.0,<15.0.0",
    "tqdm>=4.67.0,<5.0.0",
    "python-dateutil>=2.9.0,<3.0.0",
    
    # Logging
    "python-json-logger>=2.0.0,<3.0.0",
    
    # Data Science & ML (Basic)
    "numpy>=1.23.0,<3.0.0",
    "pandas>=2.3.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.0,<9.0.0",
    "pytest-asyncio>=1.0.0,<2.0.0",
    "pytest-cov>=6.2.0,<7.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    
    # Code Quality & Linting
    "ruff>=0.12.0,<1.0.0",
    "mypy>=1.16.0,<2.0.0",
    
    # Security Scanning & Audit Tools
    "bandit>=1.8.0,<2.0.0",
    "pip-audit>=2.9.0,<3.0.0",
    
    # Pre-commit Hooks
    "pre-commit>=4.2.0,<5.0.0",
    
    # Documentation
    "sphinx>=7.0.0,<8.0.0",
    "mkdocs>=1.6.0,<2.0.0",
    "mkdocs-get-deps>=0.2.0,<1.0.0",
    
    # Development Tools
    "jupyter>=1.1.0,<2.0.0",
    "ipykernel>=6.29.0,<7.0.0",
    "notebook>=7.4.0,<8.0.0",
    "jupyterlab>=4.4.0,<5.0.0",
    
    # Build & Package Management
    "build>=1.2.0,<2.0.0",
    "setuptools>=80.9.0,<81.0.0",
    "wheel>=0.44.0,<1.0.0",
    
    # Additional Development Utilities
    "coverage>=7.9.0,<8.0.0",
    "tox>=4.0.0,<5.0.0",
    "twine>=5.0.0,<6.0.0",
]

evaluation = [
    # Evaluation Framework
    "ragas>=0.2.15,<1.0.0",
    "langchain>=0.3.26,<1.0.0",
    "langchain-community>=0.3.27,<1.0.0",
    "langchain-core>=0.3.68,<1.0.0",
    "langchain-openai>=0.3.27,<1.0.0",
    "langchain-text-splitters>=0.3.8,<1.0.0",
]

[project.scripts]
start-api = "start_api:main"

[project.urls]
Homepage = "https://github.com/your-username/job-application-helper"
Repository = "https://github.com/your-username/job-application-helper"
Issues = "https://github.com/your-username/job-application-helper/issues"

[dependency-groups]
dev = [
    "coverage>=7.10.4",
    "pytest>=8.4.1",
    "ruff>=0.12.9",
]

# Tool configurations
[tool.ruff]
target-version = "py39"
line-length = 88
fix = true
show-fixes = true

# Linting configuration
[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort (import sorting)
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented code)
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]

ignore = [
    "E501",    # line too long (handled by formatter)
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "S101",    # use of assert
    "S603",    # subprocess call with shell=True
    "S607",    # starting process with partial executable path
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "T201",    # print found (allow for debugging)
    "ERA001",  # commented out code (sometimes needed)
    "E402",    # module level import not at top (FastAPI pattern)
    "UP006",   # non-pep585-annotation (compatibility)
    "W293",    # blank line with whitespace
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "PLR2004", "ARG001"]
"scripts/**/*" = ["T201", "S603", "S607"]
"src/api/**/*" = ["E402", "UP006"]
"src/core/**/*" = ["E402", "UP006", "PLC0415"]

# Import sorting configuration (replaces isort)
[tool.ruff.lint.isort]
known-first-party = ["src"]
force-sort-within-sections = true
split-on-trailing-comma = true

# Formatter configuration (replaces black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
